import React,{useState,useEffect,useMemo} from 'react'
const SUPPLIERS=['Bidfood','Booker','Adams']
const CATEGORIES=['Meats','Drinks','Frozen','Ambient','Veg','Sauces']
async function api(p,o={}){const r=await fetch(p,{headers:{'Content-Type':'application/json'},...o});if(!r.ok)throw new Error('fail');return r.json()}
export default function App(){const[items,setItems]=useState([]);const[tab,setTab]=useState('Home');const[search,setSearch]=useState('');const[cat,setCat]=useState('All');const[loading,setLoading]=useState(false);
const refresh=async()=>{setLoading(true);try{const q=new URLSearchParams();if(tab!=='Home'&&tab!=='Overview')q.set('supplier',tab);setItems(await api('/api/items?'+q))}finally{setLoading(false)}}
useEffect(()=>{if(tab!=='Home')refresh()},[tab])
const submit=async e=>{e.preventDefault();const fd=new FormData(e.currentTarget);const b=Object.fromEntries(fd.entries());b.quantity=+b.quantity||0;b.price=+b.price||0;await api('/api/items',{method:'POST',body:JSON.stringify(b)});e.currentTarget.reset();setTab('Overview');await refresh()}
const remove=async id=>{await api('/api/items/'+id,{method:'DELETE'});await refresh()}
const adjust=async(it,d)=>{await api('/api/items/'+it.id,{method:'PATCH',body:JSON.stringify({quantity:Math.max(0,(it.quantity||0)+d)})});await refresh()}
const filtered=useMemo(()=>items.filter(i=>(!search||i.item.toLowerCase().includes(search.toLowerCase()))&&(cat==='All'||i.category===cat)),[items,search,cat])
const totals=useMemo(()=>{const by=SUPPLIERS.reduce((a,s)=>({...a,[s]:0}),{});let g=0;for(const i of items){const t=i.quantity*i.price;g+=t;if(by[i.supplier]!==undefined)by[i.supplier]+=t}return{by,grand:g}},[items])
return(<div className='p-6 max-w-6xl mx-auto'><h1 className='text-2xl font-bold mb-4'>Stock Management</h1><nav className='flex gap-2 mb-4'>{['Home','Overview',...SUPPLIERS].map(t=><button key={t} onClick={()=>setTab(t)} className={`px-4 py-2 rounded-xl border ${tab===t?'bg-black text-white':'bg-white'}`}>{t}</button>)}{tab!=='Home'&&<button onClick={refresh} className='ml-auto border px-3 py-2'>Refresh</button>}</nav>{tab==='Home'&&<form onSubmit={submit} className='bg-white p-4 rounded shadow grid gap-2 mb-4'><select name='supplier'>{SUPPLIERS.map(s=><option key={s}>{s}</option>)}</select><input name='item' placeholder='Item' required/><select name='category'>{CATEGORIES.map(c=><option key={c}>{c}</option>)}</select><input name='quantity' type='number' defaultValue='0'/><input name='price' type='number' step='0.01' defaultValue='0'/><button className='bg-black text-white px-3 py-1 rounded'>Add</button></form>}{tab!=='Home'&&(loading?<p>Loading...</p>:<div><input placeholder='Search' value={search} onChange={e=>setSearch(e.target.value)} className='border p-1'/> <select value={cat} onChange={e=>setCat(e.target.value)}>{['All',...CATEGORIES].map(c=><option key={c}>{c}</option>)}</select><p>Total £{totals.grand.toFixed(2)}</p><table className='w-full'><thead><tr><th>Item</th><th>Cat</th><th>Qty</th><th>Price</th><th>Total</th><th></th></tr></thead><tbody>{filtered.map(i=><tr key={i.id}><td>{i.item}</td><td>{i.category}</td><td><button onClick={()=>adjust(i,-1)}>-</button>{i.quantity}<button onClick={()=>adjust(i,1)}>+</button></td><td>£{i.price.toFixed(2)}</td><td>£{(i.quantity*i.price).toFixed(2)}</td><td><button onClick={()=>remove(i.id)}>Remove</button></td></tr>)}</tbody></table></div>)}</div>) }
